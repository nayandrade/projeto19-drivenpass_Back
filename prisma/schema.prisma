generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  id             Int       @id(map: "cards_pk") @default(autoincrement())
  userId         Int
  title          String
  number         String
  cardName       String
  cvv            String
  expirationDate String
  password       String
  isVirtual      Boolean
  type           cardsType
  users          users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cards_fk0")
}

model credentials {
  id       Int    @id(map: "credentials_pk") @default(autoincrement())
  userId   Int
  title    String
  url      String
  username String
  password String
  users    users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "credentials_fk0")
}

model safeNotes {
  id     Int    @id(map: "safeNotes_pk") @default(autoincrement())
  userId Int
  title  String @db.VarChar(50)
  text   String @db.VarChar(1000)
  users  users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "safeNotes_fk0")
}

model users {
  id          Int           @id(map: "users_pk") @default(autoincrement())
  email       String        @unique
  password    String
  cards       cards[]
  credentials credentials[]
  safeNotes   safeNotes[]
  wifi        wifi[]
}

model wifi {
  id       Int    @id(map: "wifi_pk") @default(autoincrement())
  userId   Int
  title    String
  username String
  password String
  users    users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wifi_fk0")
}

enum cardsType {
  credit
  debt
  both
}
